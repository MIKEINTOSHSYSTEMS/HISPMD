<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_dhis2_reporting_rate_report1  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["selectList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List
function selectList($dataSource, $command)
{

		$method = "GET";
$url = "/api/dhis2/report/dhis2reportsapi.php";

// Replace variables in the URL
$url = RunnerContext::PrepareRest($url);

// Extract and parse the `q` parameter
$query = isset($_GET['q']) ? $_GET['q'] : '';

// Initialize parameters with default values
//$organisationUnits = ['Rp268JB6Ne4', 'GvFqTavdpGE', 'GvFqTavdpGE','r5WWF9WDzoa', 'PD1fqyvJssC', 'U2QkKSeyL5r']; // Default organisation units
$organisationUnits = ['Rp268JB6Ne4', 'GvFqTavdpGE', 'GvFqTavdpGE','r5WWF9WDzoa', 'PD1fqyvJssC', 'U2QkKSeyL5r']; // Default organisation units
$dataSets = ['BfMAe6Itzgt']; // Default data sets
$reportPeriods = ['LAST_6_BIMONTHS']; // Default report periods

// Parse `q` parameter for organisation units
preg_match('/organisationUnit~equals~([^)]*)/', $query, $matches);
if (isset($matches[1])) {
    $organisationUnits = explode(',', urldecode($matches[1]));
}

// Parse `q` parameter for data sets
preg_match('/dataSet~equals~([^)]*)/', $query, $matches);
if (isset($matches[1])) {
    $dataSets = explode(',', urldecode($matches[1]));
}

// Parse `q` parameter for report periods
preg_match('/reportPeriod~equals~([^)]*)/', $query, $matches);
if (isset($matches[1])) {
    $reportPeriods = explode(',', urldecode($matches[1]));
}

// Log extracted parameters for debugging
error_log("Organisation Units: " . implode(',', $organisationUnits));
error_log("Data Sets: " . implode(',', $dataSets));
error_log("Report Periods: " . implode(',', $reportPeriods));

// Construct the API URL with parameters
if (!empty($organisationUnits) && !empty($dataSets) && !empty($reportPeriods)) {
    $url .= "?action=fetchAnalyticsData";
    foreach ($organisationUnits as $orgUnit) {
        $url .= "&organisationUnit[]=" . urlencode($orgUnit);
    }
    foreach ($dataSets as $dataSet) {
        $url .= "&dataSet=" . urlencode($dataSet);
    }
    foreach ($reportPeriods as $reportPeriod) {
        $url .= "&reportPeriod=" . urlencode($reportPeriod);
    }
} else {
    http_response_code(400);
    echo json_encode(['error' => 'Missing required parameters']);
    exit;
}

// Log constructed URL for debugging
error_log("API URL: " . $url);

// Do the API request
$response = $dataSource->getConnection()->requestJson($url, $method);
if ($response === false) {
    // Something went wrong
    $dataSource->setError($dataSource->getConnection()->lastError());
    error_log("Request failed: " . $dataSource->getConnection()->lastError());
    return false;
}

// Log API response for debugging
error_log("API Response: " . $response);

// Convert API result into recordset
$rs = $dataSource->resultFromJson($response, true);
if (!$rs) {
    error_log("Error processing data");
    return false;
}

// Map fixed periods back to their relative period names for display
if (!function_exists('mapFixedPeriodToRelative')) {
    function mapFixedPeriodToRelative($fixedPeriod) {
        // Detect relative period format using regex
        if (preg_match('/^\d{4}B\d{2}$/', $fixedPeriod)) {
            return 'LAST_6_BIMONTHS';
        }
        // Add other regex patterns and mappings as needed
        else {
            return $fixedPeriod;
        }
    }
}

// Add the relative periods as a new column in the recordset
foreach ($rs as &$row) {
    if (isset($row['Period'])) {
        $row['Period'] = mapFixedPeriodToRelative($row['Period']);
    }
}

// Apply search and filter parameters
$rs = $dataSource->filterResult($rs, $command->filter);

// Apply order parameters
$rs = $dataSource->reorderResult($command, $rs);

// Apply pagination
$rs->seekRecord($command->startRecord);
return $rs;
;		
} // function selectList

		
		
		
		
		



}
?>
