<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_dhis2_reporting_rates_chart  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["selectList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List
function selectList($dataSource, $command)
{

		$method = "GET";
$url = "/api/dhis2/report/dhis2reportsapi.php";

// Prepare the URL
$url = RunnerContext::PrepareRest($url);

// Extract and parse the `q` parameter
$query = isset($_GET['q']) ? $_GET['q'] : '';

// Default values
$organisationUnits = ['Rp268JB6Ne4', 'GvFqTavdpGE', 'r5WWF9WDzoa', 'PD1fqyvJssC', 'U2QkKSeyL5r'];
$dataSets = ['BfMAe6Itzgt'];
$reportPeriods = ['LAST_6_BIMONTHS']; // Default report period

// Allowed report periods
$allowedReportPeriods = [
    'LAST_12_MONTHS', 'LAST_12_WEEKS', 'LAST_2_SIXMONTHS', 'LAST_3_MONTHS', 'LAST_4_QUARTERS',
    'LAST_4_WEEKS', 'LAST_52_WEEKS', 'LAST_5_FINANCIAL_YEARS', 'LAST_5_YEARS', 'LAST_6_BIMONTHS',
    'LAST_BIMONTH', 'LAST_FINANCIAL_YEAR', 'LAST_MONTH', 'LAST_QUARTER', 'LAST_SIX_MONTH',
    'LAST_WEEK', 'LAST_YEAR', 'MONTHS_LAST_YEAR', 'MONTHS_THIS_YEAR', 'QUARTERS_LAST_YEAR',
    'QUARTERS_THIS_YEAR', 'THIS_BIMONTH', 'THIS_FINANCIAL_YEAR', 'THIS_MONTH', 'THIS_QUARTER',
    'THIS_SIX_MONTH', 'THIS_WEEK', 'THIS_YEAR'
];

// Parse `q` parameter for organisation units, data sets, and report periods
preg_match('/organisationUnit~equals~([^)]*)/', $query, $matches);
if (isset($matches[1])) {
    $organisationUnits = array_map('trim', explode(',', urldecode($matches[1])));
}
preg_match('/dataSet~equals~([^)]*)/', $query, $matches);
if (isset($matches[1])) {
    $dataSets = array_map('trim', explode(',', urldecode($matches[1])));
}
preg_match('/reportPeriod~equals~([^)]*)/', $query, $matches);
if (isset($matches[1])) {
    $inputReportPeriods = array_map('trim', explode(',', urldecode($matches[1])));
    // Validate and filter input report periods
    $reportPeriods = array_filter($inputReportPeriods, function($period) use ($allowedReportPeriods) {
        return in_array($period, $allowedReportPeriods);
    });
}

// Log extracted parameters
error_log("Organisation Units: " . implode(',', $organisationUnits));
error_log("Data Sets: " . implode(',', $dataSets));
error_log("Report Periods: " . implode(',', $reportPeriods));

// Construct the API URL with parameters
if (!empty($organisationUnits) && !empty($dataSets) && !empty($reportPeriods)) {
    $url .= "?action=fetchAnalyticsData";
    foreach ($organisationUnits as $orgUnit) {
        $url .= "&organisationUnit[]=" . urlencode($orgUnit);
    }
    foreach ($dataSets as $dataSet) {
        $url .= "&dataSet=" . urlencode($dataSet);
    }
    foreach ($reportPeriods as $reportPeriod) {
        $url .= "&reportPeriod=" . urlencode($reportPeriod);
    }
} else {
    http_response_code(400);
    echo json_encode(['error' => 'Missing required parameters']);
    exit;
}

// Log constructed URL
error_log("API URL: " . $url);

// Make the API request
$response = $dataSource->getConnection()->requestJson($url, $method);
if ($response === false) {
    $dataSource->setError($dataSource->getConnection()->lastError());
    error_log("Request failed: " . $dataSource->getConnection()->lastError());
    return false;
}

// Log API response
error_log("API Response: " . $response);

// Convert API result into recordset
$rs = $dataSource->resultFromJson($response, true);
if (!$rs) {
    error_log("Error processing data");
    return false;
}

// No need to map periods to relative periods; keep original values
// Apply search and filter parameters
$rs = $dataSource->filterResult($rs, $command->filter);

// Apply order parameters
$rs = $dataSource->reorderResult($command, $rs);

// Apply pagination
$rs->seekRecord($command->startRecord);
return $rs;

;		
} // function selectList

		
		
		
		
		



}
?>
