<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_dhis2_reports  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["selectList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List
function selectList($dataSource, $command)
{

		$method = "GET";
$url = "/api/dhis2/report/dhis2report.php";

// Replace variables in the URL
$url = RunnerContext::PrepareRest($url);

// Extract and parse the `q` parameter
$query = isset($_GET['q']) ? $_GET['q'] : '';

// Initialize parameters with default values
$defaultParams = [
    'dataSets' => ['Mit66Ie5u6x'], // Default dataset ID
    'orgUnits' => ['b3aCK1PTn5S'], // Default organisation unit ID
    'periods' => [
        'THIS_WEEK', 'LAST_WEEK', 'LAST_4_WEEKS', 'LAST_12_WEEKS', 'LAST_52_WEEKS', 'THIS_MONTH',
        'LAST_MONTH', 'THIS_BIMONTH', 'LAST_BIMONTH', 'THIS_QUARTER', 'LAST_QUARTER', 'THIS_SIX_MONTH',
        'LAST_SIX_MONTH', 'MONTHS_THIS_YEAR', 'QUARTERS_THIS_YEAR', 'THIS_YEAR', 'MONTHS_LAST_YEAR',
        'QUARTERS_LAST_YEAR', 'LAST_YEAR', 'LAST_5_YEARS', 'LAST_12_MONTHS', 'LAST_3_MONTHS',
        'LAST_6_BIMONTHS', 'LAST_4_QUARTERS', 'LAST_2_SIXMONTHS', 'THIS_FINANCIAL_YEAR',
        'LAST_FINANCIAL_YEAR', 'LAST_5_FINANCIAL_YEARS'
    ] // Default periods
];

// Helper function to extract and process query parameters
if (!function_exists('extractQueryParams')) {
    function extractQueryParams($query, $defaultParams) {
        $params = $defaultParams;

        // Extract datasets
        if (preg_match('/dx~equals~([^)]*)/', $query, $matches)) {
            $params['dataSets'] = array_map('trim', explode(',', urldecode($matches[1])));
        }

        // Extract periods
        if (preg_match('/pe~contains~([^)]*)/', $query, $matches)) {
            $inputPeriods = array_map('trim', explode(';', urldecode($matches[1])));
            $params['periods'] = $inputPeriods;
        }

        // Extract organization units
        if (preg_match('/ou~equals~([^)]*)/', $query, $matches)) {
            $params['orgUnits'] = array_map('trim', explode(',', urldecode($matches[1])));
        }

        return $params;
    }
}

// Extract parameters
$params = extractQueryParams($query, $defaultParams);

// Map relative periods to DHIS2 API supported formats
if (!function_exists('mapRelativePeriods')) {
    function mapRelativePeriods($periods) {
        $relativePeriods = [
            'THIS_WEEK' => 'THIS_WEEK',
            'LAST_WEEK' => 'LAST_WEEK',
            'LAST_4_WEEKS' => 'LAST_4_WEEKS',
            'LAST_12_WEEKS' => 'LAST_12_WEEKS',
            'LAST_52_WEEKS' => 'LAST_52_WEEKS',
            'THIS_MONTH' => 'THIS_MONTH',
            'LAST_MONTH' => 'LAST_MONTH',
            'THIS_BIMONTH' => 'THIS_BIMONTH',
            'LAST_BIMONTH' => 'LAST_BIMONTH',
            'THIS_QUARTER' => 'THIS_QUARTER',
            'LAST_QUARTER' => 'LAST_QUARTER',
            'THIS_SIX_MONTH' => 'THIS_SIX_MONTH',
            'LAST_SIX_MONTH' => 'LAST_SIX_MONTH',
            'MONTHS_THIS_YEAR' => 'MONTHS_THIS_YEAR',
            'QUARTERS_THIS_YEAR' => 'QUARTERS_THIS_YEAR',
            'THIS_YEAR' => 'THIS_YEAR',
            'MONTHS_LAST_YEAR' => 'MONTHS_LAST_YEAR',
            'QUARTERS_LAST_YEAR' => 'QUARTERS_LAST_YEAR',
            'LAST_YEAR' => 'LAST_YEAR',
            'LAST_5_YEARS' => 'LAST_5_YEARS',
            'LAST_12_MONTHS' => 'LAST_12_MONTHS',
            'LAST_3_MONTHS' => 'LAST_3_MONTHS',
            'LAST_6_BIMONTHS' => 'LAST_6_BIMONTHS',
            'LAST_4_QUARTERS' => 'LAST_4_QUARTERS',
            'LAST_2_SIXMONTHS' => 'LAST_2_SIXMONTHS',
            'THIS_FINANCIAL_YEAR' => 'THIS_FINANCIAL_YEAR',
            'LAST_FINANCIAL_YEAR' => 'LAST_FINANCIAL_YEAR',
            'LAST_5_FINANCIAL_YEARS' => 'LAST_5_FINANCIAL_YEARS'
        ];

        $mappedPeriods = [];
        foreach ($periods as $period) {
            if (array_key_exists($period, $relativePeriods)) {
                $mappedPeriods[] = $relativePeriods[$period];
            } else {
                error_log("Unrecognized period format: " . $period);
            }
        }

        return $mappedPeriods;
    }
}

// Map periods
$mappedPeriods = mapRelativePeriods($params['periods']);

// Log extracted parameters for debugging
error_log("Indicators: " . implode(',', $params['dataSets']));
error_log("Organization Units: " . implode(',', $params['orgUnits']));
error_log("Periods: " . implode(';', $mappedPeriods));

// Prepare request body
$body = [
    ['name' => 'action', 'value' => 'fetchAnalyticsData', 'location' => 'url', 'skipEmpty' => true]
];

// Add datasets to the body
foreach ($params['dataSets'] as $indicator) {
    $body[] = ['name' => 'dataSet[]', 'value' => $indicator, 'location' => 'url', 'skipEmpty' => true];
}

// Add organization units to the body
foreach ($params['orgUnits'] as $orgUnit) {
    $body[] = ['name' => 'organisationUnit[]', 'value' => $orgUnit, 'location' => 'url', 'skipEmpty' => true];
}

// Add report periods to the body
foreach ($mappedPeriods as $period) {
    $body[] = ['name' => 'reportPeriod[]', 'value' => $period, 'location' => 'url', 'skipEmpty' => true];
}

$body = $dataSource->preparePayload($body);

// Do the API request
$response = $dataSource->getConnection()->requestJson($url, $method, $body["form"], $body["header"], $body["url"]);
if ($response === false) {
    $dataSource->setError($dataSource->getConnection()->lastError());
    error_log("Request failed: " . $dataSource->getConnection()->lastError());
    return false;
}

// Log API response for debugging
error_log("API Response: " . $response);

// Convert API result into recordset
$rs = $dataSource->resultFromJson($response, true);
if (!$rs) {
    error_log("Error processing data");
    return false;
}

// Process the result set
$dataRows = [];
foreach ($rs as $record) {
    $dataRows[] = [
        'Title' => isset($record['title']) ? $record['title'] : '',
        'Data Set' => isset($record['dataSet']) ? $record['dataSet'] : '',
        'Report Period' => isset($record['period']) ? $record['period'] : '',
        'Organisation Unit ID' => isset($record['organisationUnitID']) ? $record['organisationUnitID'] : '',
        'Organisation Unit' => isset($record['organisationUnit']) ? $record['organisationUnit'] : '',
        'Organisation Unit Code' => isset($record['organisationUnitCode']) ? $record['organisationUnitCode'] : '',
        'Organisation Unit Description' => isset($record['organisationUnitDescription']) ? $record['organisationUnitDescription'] : '',
        'Actual Reports' => isset($record['actualReports']) ? $record['actualReports'] : '',
        'Expected Reports' => isset($record['expectedReports']) ? $record['expectedReports'] : '',
        'Reporting Rate' => isset($record['reportingRate']) ? $record['reportingRate'] : '',
        'Actual Reports On Time' => isset($record['actualReportsOnTime']) ? $record['actualReportsOnTime'] : '',
        'Reporting Rate On Time' => isset($record['reportingRateOnTime']) ? $record['reportingRateOnTime'] : ''
    ];
}

// Apply search and filter parameters
$rs = $dataSource->filterResult($rs, $command->filter);

// Apply order parameters
$rs = $dataSource->reorderResult($command, $rs);

// Apply pagination
$rs->seekRecord($command->startRecord);

// Return the processed result set
return $rs;

;		
} // function selectList

		
		
		
		
		



}
?>
