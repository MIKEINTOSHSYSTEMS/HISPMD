version: '3.9'
# docker-compose -p hispmd_sys up -d
# docker-compose -p hispmd_sys -f docker-compose.yml up -d
# docker-compose -p hispmd_sys down --volumes --rmi all
# docker-compose -p hispmd_sys -f docker-compose.yml down --volumes --rmi all
services:
  traefik:
    image: traefik:latest
    container_name: hispmd_traefik
    privileged: false  # If you want to run with elevated privileges make it true
    command:
      #- /bin/bash -c "chmod -R 777 /letsencrypt/extract-cert.sh"
      #- /bin/bash -c "chmod +x /letsencrypt/extract-cert.sh"
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:8808
      - --entrypoints.websecure.address=:10443
      - --api.dashboard=true
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=myresolver
      - --certificatesresolvers.myresolver.acme.email=dev@merqconsultancy.org
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
#      - --entrypoints.websecure.http.tls.domains[0].main=hispmd.moh.gov.et
#      - --entrypoints.websecure.http.tls.domains[0].sans=www.example.com     

      - "--certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53" # define dns servers for your resolver, here cloudflare
      ####################################################
      #- "--log.level=INFO" # enable log level
      - "--log.level=DEBUG" # enable log level
      - "--accesslog=true" # enable access logs
      - "--accesslog.filepath=/logs/traefik.log" # define access log path
      - "--accesslog.format=json" # set access log format to json instead clm
      - "--accesslog.bufferingsize=0" # set access log buffer size to 0
      - "--accesslog.filters.statuscodes=200-599" # only log http errors in logs; alternatively set 200-599 to include successful http requests
      - "--accesslog.fields.headers.defaultmode=drop" # drop all headers
      - "--accesslog.fields.headers.names.user-agent=keep" # keep user-agent header
      - "--serversTransport.insecureSkipVerify=true" # set insecureSkipVerify to true to allow self-signed certificates

    ports:
      - "8808:8080"
      - "10443:8443"
      - "8087:8080"
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Mount the Docker socket as readonly      
      #- /var/run/docker.sock:/var/run/docker.sock
    #entrypoint: /bin/sh -c "sleep 30 && /letsencrypt/extract-cert.sh"
    extra_hosts:
      - host.docker.internal:192.168.128.1  # 172.17.0.1 define internal ip; helps traefik to resolve containers running in host network mode
    security_opt:
      - no-new-privileges:true      
    networks:
      docker-proxynet:
        #- docker-proxynet
      hispmdnet:
        ipv4_address: 192.168.128.22
        
    environment:
      - TZ=Africa/Addis_Ababa # define timezone
      - TRAEFIK_BASIC_AUTH_USER=${TRAEFIK_BASIC_AUTH_USER}  # Username for dashboard
      - TRAEFIK_BASIC_AUTH_PASSWORD=${TRAEFIK_BASIC_AUTH_PASSWORD}  # Password for dashboard        
    env_file:
      - .env    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.hispmd.merqconsultancy.org`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH_USER}:${TRAEFIK_BASIC_AUTH_PASSWORD}"

      #- "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$hashedpassword"  # Add Basic Auth
      #- "traefik.http.routers.traefik.middlewares=traefik-auth"  # Apply Basic Auth
      #- echo $(htpasswd -nb admin hispmdadmin) | sed -e s/\\$/\\$\\$/g

  socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:1.26.2
    container_name: hispmd_socket-proxy
    environment:
      - CONTAINERS=1
      - EVENTS=1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - docker-proxynet

#    networks:
#      hispmdnet:
#        ipv4_address:192.168.128.23

    restart: always
    read_only: true
    tmpfs:
      - /run      

  php:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hispmd_system
    volumes:
      - ./analytics:/var/www/html/analytics
      - ./api:/var/www/html/api
      - ./app:/var/www/html/app
      - ./calendar:/var/www/html/calendar
      - ./composer.json:/var/www/html/composer.json
      - ./composer.lock:/var/www/html/composer.lock
      - ./config:/var/www/html/config
      - ./.env:/var/www/html/.env
      - ./index.php:/var/www/html/index.php
      - ./LICENSE:/var/www/html/LICENSE
      - ./maps:/var/www/html/maps
      - ./mysql-init:/var/www/html/mysql-init
      - ./README.md:/var/www/html/README.md
      - ./server.html:/var/www/html/server.html
      - ./src:/var/www/html/src
      - ./styles:/var/www/html/styles
      - ./test:/var/www/html/test
      - ./test.php:/var/www/html/test.php
      - ./vendor:/var/www/html/vendor
      - /var/run/mysqld/mysqld.sock:/var/run/mysqld/mysqld.sock
    expose:
      - "9000"
    depends_on:
      - db
    environment:
      MYSQL_HOST: db
      MYSQL_PORT: 3306
      MYSQL_USER: hisp_md
      MYSQL_PASSWORD: hisp_md
      MYSQL_DATABASE: hisp_md
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.php.rule=Host(`hispmd.merqconsultancy.org`)"
      - "traefik.http.routers.php.entrypoints=websecure"
      - "traefik.http.routers.php.tls.certresolver=myresolver"
      - "traefik.http.services.php.loadbalancer.server.port=9000"

  chat:
    build:
      context: .
      dockerfile: Dockerfile
    #image: hispmd_chatbot
    container_name: hispmd_chatbot
    ports:
      - "8501:8501"
    volumes:
      - ./ai/chat:/ai/chat
      - ./ai/chat/.env:/ai/chat/.env
      - ./ai/chat/certs:/ai/chat/certs
      - ./ai/chat/.streamlit/config.toml:/root/.streamlit/config.toml
    environment:
      - PYTHONUNBUFFERED=1
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - SSH_USE=${SSH_USE}
      - SSH_HOST=${SSH_HOST}
      - SSH_PORT=${SSH_PORT}
      - SSH_USER=${SSH_USER}
      - SSH_PASSWORD=${SSH_PASSWORD}
      - LOCAL_PORT=${LOCAL_PORT}
      - GROQ_API_KEY=${GROQ_API_KEY}
    env_file:
      - .env
    restart: unless-stopped  # Ensures the container restarts unless manually stopped
    #command: serve -a 0.0.0.0:8501      
    healthcheck:
      #test: ["CMD", "curl", "--fail", "http://localhost:8501/_stcore/health"]
     # test: ["CMD", "curl", "--fail", "https://localhost:8501/_stcore/health"]
     # interval: 10s
     # timeout: 5s
     # retries: 3

      #test: ["CMD", "curl", "-f", "http://0.0.0.0:8501"]  # Health check for the service
      #test: ["CMD", "nc", "-z", "0.0.0.0", "8501"]  # Health check for the service
      test: ["CMD", "curl", "--fail", "http://localhost:8501/_stcore/health"]      
      interval: 30s  # Check health every 30 seconds
      retries: 3  # Retry up to 3 times before marking as unhealthy
      start_period: 10s  # Wait 10 seconds before starting health checks
      timeout: 5s  # Health check timeout of 5 seconds    
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.5

  nginx:
    image: nginx:latest
    container_name: hispmd_nginx
    ports:
      - "8008:80"
      - "8443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./analytics:/var/www/html/analytics
      - ./api:/var/www/html/api
      - ./app:/var/www/html/app
      - ./calendar:/var/www/html/calendar
      - ./composer.json:/var/www/html/composer.json
      - ./composer.lock:/var/www/html/composer.lock
      - ./config:/var/www/html/config
      - ./.env:/var/www/html/.env
      - ./index.php:/var/www/html/index.php
      - ./LICENSE:/var/www/html/LICENSE
      - ./maps:/var/www/html/maps
      - ./mysql-init:/var/www/html/mysql-init
      - ./README.md:/var/www/html/README.md
      - ./server.html:/var/www/html/server.html
      - ./src:/var/www/html/src
      - ./styles:/var/www/html/styles
      - ./test:/var/www/html/test
      - ./test.php:/var/www/html/test.php
      - ./vendor:/var/www/html/vendor
    depends_on:
      - php
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.12

  reverse-proxy:
    image: nginx:latest
    container_name: hispmd_reverse_proxy
    ports:
      - "8888:80"
      - "7443:443"
    volumes:
      - ./config/nginx-reverse-proxy.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs  # SSL certificates
    depends_on:
      - nginx
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.20        

  metabase:
    image: metabase/metabase:latest
    #image: metabase/metabase:latest
    #image: metabase/metabase:v0.53.0.x
    container_name: hispmd_viz
    hostname: metabase
#    volumes:
#      - ./src/hispmd_vizdata:/metabase-data
    ports:
      - "127.0.0.1:4004:3000"  # Bind to specific IP address
    environment:
#      MB_DB_FILE: /metabase-data/hispmd.db
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: hispmddb
      MB_DB_PORT: 5432
      MB_DB_USER: hispmddb
      MB_DB_PASS: hispmddb
      MB_DB_HOST: 192.168.128.4 #postgres
      MB_ADMIN_EMAIL: dev@merqconsultancy.org
      MB_ADMIN_FIRST_NAME: MERQ
      MB_ADMIN_PASSWORD: hispmdmerqdev0
    depends_on:
      - postgres
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.9
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metabase.rule=Host(`viz.hispmd.merqconsultancy.org`)"
      - "traefik.http.routers.metabase.entrypoints=websecure"
      - "traefik.http.routers.metabase.tls.certresolver=myresolver"
      - "traefik.http.services.metabase.loadbalancer.server.port=3000"        

  postgres:
    image: postgres:17
#    image: postgres:16
#    image: postgres:latest
    container_name: hispmd_postgres
    hostname: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "hispmddb"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: hispmddb
      POSTGRES_USER: hispmddb
      POSTGRES_PASSWORD: hispmddb
#    volumes:
#      - ./src/hispmddb:/var/lib/postgresql/data
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Runs only once
      #- ./src/hispmddb:/docker-entrypoint-initdb.d/hispmddb   
#    command: >
#      bash -c "
#      docker-entrypoint.sh postgres &
#      while ! pg_isready -U hispmddb; do sleep 1; done;
#      psql -U hispmddb -tc \"SELECT 1 FROM pg_database WHERE datname = 'hisp_md'\" | grep -q 1 ||
#      psql -U hispmddb -c 'CREATE DATABASE hisp_md;';
#      wait"

# docker exec -it hispmd_postgres psql -U hispmddb -tc "SELECT 1 FROM pg_database WHERE datname = 'hisp_md'" | grep -q 1 || docker exec -it hispmd_postgres psql -U hispmddb -c "CREATE DATABASE hisp_md;"

    networks:
      hispmdnet:
        ipv4_address: 192.168.128.4

  db:
    image: mariadb:11.2.4
    container_name: hispmd_mariadb
    restart: always
    environment:
      MYSQL_ROOT_HOST: localhost
      MYSQL_DATABASE: hisp_md
      MYSQL_ROOT_PASSWORD: merqhispmdadmin
      MYSQL_USER: hisp_md
      MYSQL_PASSWORD: hisp_md
    volumes:
      - ./src/hispmd_dev.sql:/docker-entrypoint-initdb.d/hispmd_dev.sql
      - ./src/hispmd_matomo.sql:/docker-entrypoint-initdb.d/hispmd_matomo.sql
      - ./mysql-init:/docker-entrypoint-initdb.d
      #- /var/run/mysqld/mysqld.sock:/var/run/mysqld/mysqld.sock  # Mount the MySQL socket file if there is no conflict with the host server
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.7

  phpmyadmin:
    image: phpmyadmin:5.2.1
    restart: always
    ports:
      - "3308:80"
    environment:
      PMA_ARBITRARY: 1
      PMA_HOSTS: db
      PMA_USER: hisp_md
      PMA_PASSWORD: hisp_md
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.2

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5434:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: dev@merqconsultancy.org
      PGADMIN_DEFAULT_PASSWORD: merqhispmddev
    volumes:
      - hispmd_pgadmindata:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.8

  mongo:
    image: mongo:latest
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: merqhispmddev
      MONGO_INITDB_ROOT_PASSWORD: merqhispmddev
    volumes:
      - hispmd_mongodata:/data/db
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.6

  mongo-express:
    image: mongo-express:1.0.2
    restart: always
    ports:
      - "8118:8018"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: merqhispmddev
      ME_CONFIG_MONGODB_ADMINPASSWORD: merqhispmddev
      ME_CONFIG_MONGODB_URL: mongodb://merqhispmddev:merqhispmddev@mongo:27017/
    depends_on:
      - mongo
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.11

  grafana:
    #image: grafana/grafana-enterprise
    image: grafana/grafana
    container_name: hispmd_grafana
    restart: unless-stopped
    ports:
      - "3030:3000"
    volumes:
      - ./src/hispmd_grafana:/var/lib/grafana
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.3

  mkdocs:
    image: squidfunk/mkdocs-material:latest
    container_name: hispmd_docs
    ports:
      - "8558:8558"  # Expose MkDocs server on port 8000
    volumes:
      - ./docs/:/docs  # Mount the current docs directory to /docs inside the container
    restart: unless-stopped  # Ensures the container restarts unless manually stopped
    command: serve -a 0.0.0.0:8558  # Start the MkDocs development server on all interfaces

    environment:
      - MKDOCS_CONFIG=mkdocs.yml  # Specify the configuration file

    healthcheck:
      #test: ["CMD", "curl", "-f", "http://0.0.0.0:8558"]  # Health check for the service
      test: ["CMD", "nc", "-z", "0.0.0.0", "8558"]  # Health check for the service
      interval: 30s  # Check health every 30 seconds
      retries: 3  # Retry up to 3 times before marking as unhealthy
      start_period: 10s  # Wait 10 seconds before starting health checks
      timeout: 5s  # Health check timeout of 5 seconds

    networks:
      hispmdnet:
        ipv4_address: 192.168.128.14

  portainer:
    image: portainer/portainer-ce:latest
    container_name: hispmd_portainer
    restart: unless-stopped
    ports:
      - "9009:9000"  # Portainer web UI
      #- "8000:8000"  # Portainer agent (optional)
    volumes:
      - portainer_data:/data  # Persist Portainer data
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
      #- /var/run/docker.sock:/var/run/docker.sock:ro  # Mount the Docker socket as readonly
    environment:
      - DOCKER_HOST=tcp://docker-proxy:2375  # Point to the Docker proxy
    networks:
      hispmdnet:  # Connect to the same network as your existing services
        ipv4_address: 192.168.128.17

  docker-proxy:
    image: alpine/socat
    container_name: docker-proxy
    command: TCP-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock
    volumes:
      #- /var/run/docker.sock:/var/run/docker.sock  # Mount the Docker socket
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Mount the Docker socket as readonly
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.18
    ports:
      - "2375:2375"  # Exposing the Docker port    

  portainer-setup:
    image: curlimages/curl:latest
    container_name: portainer-setup
    user: root
    depends_on:
      - portainer
    networks:
      hispmdnet:
        ipv4_address: 192.168.128.19
    command: |
      sh -c '
      apk add --no-cache jq
      until curl -s http://portainer:9000/api/status >/dev/null; do sleep 2; done

      # Create admin user
      curl -X POST http://portainer:9000/api/users/admin/init \
        -H "Content-Type: application/json" \
        -d "{\"username\":\"admin\",\"password\":\"hispmdportainers\"}"

      TOKEN=$$(curl -s -X POST http://portainer:9000/api/auth \
        -H "Content-Type: application/json" \
        -d "{\"username\":\"admin\",\"password\":\"hispmdportainers\"}" \
        | jq -r ".jwt")

      # Create a new user with restricted access
      curl -X POST http://portainer:9000/api/users \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$TOKEN" \
        -d "{\"username\":\"hispmd_user\",\"password\":\"hispmdpassword\",\"role\":2}"

      # Apply resource filtering to restrict access to hispmd_sys stack only
      curl -X PUT http://portainer:9000/api/settings \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$TOKEN" \
        -d "{\"resourceFilters\":[{\"type\":\"label\",\"label\":\"com.docker.compose.project=hispmd_sys\"}]}"

      # Assign 'hispmd_user' access to hispmd_sys stack only
      STACK_ID=$$(curl -s -X GET http://portainer:9000/api/stacks \
        -H "Authorization: Bearer $$TOKEN" | jq -r '.[] | select(.Name=="hispmd_sys") | .Id')

      curl -X PUT http://portainer:9000/api/stacks/$$STACK_ID/access \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $$TOKEN" \
        -d "[{\"UserId\":2,\"Role\":1}]"  # Read-only access
      '


  hispmd_matomo:
    image: matomo:latest
    container_name: hispmd_matomo
    restart: always
    ports:
      - "8088:80"
    networks:
      hispmdnet:
#      hispmd_sys_hispmdnet:
        ipv4_address: 192.168.128.21
    volumes:
      - ./analytics:/var/www/html
    depends_on:
      - db      
    environment:
      - MATOMO_DATABASE_HOST=192.168.128.7
      - MATOMO_DATABASE_ADAPTER=mysql
      - MATOMO_DATABASE_TABLES_PREFIX=matomo_
      - MATOMO_DATABASE_USERNAME=hisp_md
      - MATOMO_DATABASE_PASSWORD=hisp_md
      - MATOMO_DATABASE_DBNAME=hispmd_matomo
      - PHP_MEMORY_LIMIT=256M
    command: /bin/bash -c "chmod -R 777 /var/www/html/tmp && apache2-foreground"

#  rancher:
#    image: rancher/rancher:latest
#    container_name: hispmd_rancher
#    restart: unless-stopped
#    ports:
#      - "8088:80"  # Map host port 8081 to container port 80
#      - "8444:443" # Map host port 8444 to container port 443
#    volumes:
#      - rancher_data:/var/lib/rancher
#    environment:
#      - CATTLE_BOOTSTRAP_PASSWORD=hispmdranchers # Set the admin password      
#    networks:
#      hispmdnet:
#        ipv4_address: 192.168.128.17
#    privileged: true  #to enable privileged mode

  #hispmd_matomo:
  #  image: bitnami/matomo:latest
  #  container_name: hispmd_matomo
  #  ports:
  #    - "8910:8080"  # Exposing port 8081 to avoid conflicts
  #  environment:
  #    MATOMO_DATABASE_HOST: ${MATOMO_DATABASE_HOST}
  #    MATOMO_DATABASE_PORT_NUMBER: ${MATOMO_DATABASE_PORT}
  #    MATOMO_DATABASE_NAME: ${MATOMO_DATABASE_NAME}
  #    MATOMO_DATABASE_USER: ${MATOMO_DATABASE_USER}
  #    MATOMO_DATABASE_PASSWORD: ${MATOMO_DATABASE_PASSWORD}
  #    ALLOW_EMPTY_PASSWORD: "no"
  #    MATOMO_USERNAME: ${MATOMO_USERNAME}
  #    MATOMO_PASSWORD: ${MATOMO_PASSWORD}
  #    MATOMO_EMAIL: ${MATOMO_EMAIL}
  #    MATOMO_WEBSITE_NAME: ${MATOMO_WEBSITE_NAME}
  #    MATOMO_WEBSITE_HOST: ${MATOMO_WEBSITE_HOST}
  #  volumes:
  #    #- ./src/hispmd_matomo:/bitnami/matomo  # Data persistence volume for Matomo
  #    - hispmd_matomo:/bitnami/matomo 
  #  depends_on:
  #    - db
  #  networks:
  #    hispmdnet:
  #      ipv4_address: 192.168.128.113

volumes:
  hispmd_pgadmindata:
  #hispmddb:
  #hispmd_vizdata:
  hispmd_mongodata:
  grafana-storage:
  portainer_data:
  analytics:
  letsencrypt:
  certs:
  #rancher_data:
  #hispmd_matomo:

networks:
  hispmdnet:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.128.0/24

  docker-proxynet:
    internal: true  
